/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    // Provides support for building a Java library. 
    // (de) Also ein jar wird erstellt
    id 'java-library'
}

//org.gradle.warning.mode=all // (all,fail,none,summary), summary ist default - diese prop in ~/.gradle/gradle.properties


//compileJava.options.encoding = 'UTF-8' // sonst wird auf WIN Cp1252 genutzt
//compileTestJava.options.encoding = 'UTF-8'
// oder besser:
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    // declare any Maven/Ivy/file repository here:
    /*
    	https://mvnrepository.com/repos/central
     */
	mavenCentral()
	
    /* Use JCenter for resolving dependencies: https://bintray.com/
    
		Bintray's JCenter is an up-to-date collection of all popular Maven OSS artifacts, 
		including artifacts published directly to Bintray.
		
		JCenter macht dicht (ab April 2021 nur noch read only), siehe
		https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/
    
     */
    jcenter()
    
    // wg. org.apache.commons.validator;version="1.8.0.SNAPSHOT" :
    flatDir {
        dirs '../lib'
    }

}

dependencies {
    // Use JUnit test framework.
//    testImplementation 'junit:junit:4.13'
// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
	testImplementation 'org.junit.platform:junit-platform-launcher:1.7.1'
//    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "5.${junit5MinorVersion}"
//    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: "1.${junit5MinorVersion}"

    // This dependency is exported to consumers, that is to say found on their compile classpath.
//	api 'javax.inject:javax.inject:1'
	
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
// https://mvnrepository.com/artifact/javax.inject/javax.inject
//implementation group: 'javax.inject', name: 'javax.inject', version: '1'
// andere schreibweise:
    implementation 'javax.inject:javax.inject:1'
    
    // https://mvnrepository.com/artifact/xerces/xercesImpl
    implementation 'xerces:xercesImpl:2.12.1'
	implementation 'xalan:xalan:2.7.2'
	  
// https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
//	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
// https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-ri
	implementation 'com.sun.xml.bind:jaxb-ri:3.0.2'
//	implementation 'jakarta.platform:jakarta.jakartaee-api:9.0.0'
//	/* Eclipse GlassFish 6.0.x ist Ã¼berdimensioniert
//	It is functionally complete and meets the compatibility requirements of the 
//	approved final version of the Jakarta EE 9 Specification. 
//	*/
//	implementation 'org.glassfish.main.core:kernel:6.0.0'
	
// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
	implementation 'com.googlecode.json-simple:json-simple:1.1'
    
    implementation 'lib:commons-validator:1.8-SNAPSHOT'
// https://mvnrepository.com/artifact/commons-logging/commons-logging
    implementation 'commons-logging:commons-logging:1.2'
}

//test {
//  // enable TestNG support (default is JUnit)
////  useTestNG()
//  // enable JUnit Platform (a.k.a. JUnit 5) support
//  useJUnitPlatform()
//  
//    // set a system property for the test JVM(s)
////  systemProperty 'some.prop', 'value'
//
//  // explicitly include or exclude tests
////  include 'org/foo/**'
//	include 'de/homebeaver/test/lei/TransformerTest'
//	include 'de/homebeaver/test/lei/LeiRecordTest'
////  exclude 'org/boo/**'
//
//  // show standard out and standard error of the test JVM(s) on the console
//  testLogging.showStandardStreams = true
//  
//    // set heap size for the test JVM(s)
////  minHeapSize = "128m"
////  maxHeapSize = "512m"
//
//  // set JVM arguments for the test JVM(s)
////  jvmArgs '-XX:MaxPermSize=256m'
//
//  // listen to events in the test execution lifecycle
//  beforeTest { descriptor ->
//     logger.lifecycle("Running test: " + descriptor)
//  }
//  
//    // Fail the 'test' task on the first test failure
//  failFast = true
//
//  // listen to standard out and standard error of the test JVM(s)
//  onOutput { descriptor, event ->
//     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//  }
//
//}
